from .reviews import Review

from uuid import UUID, uuid4
from collections import deque
from pydantic import BaseModel, field_serializer, field_validator, model_validator

class Keyword(BaseModel):
    product_id: str
    review_id: str
    keyword: str
    sentiment: float # +-1.0
    embedding: list[float] | None = None

class LLMOutput(BaseModel):
    product_id: str
    keywords: deque[Keyword]

    @field_serializer("keywords")
    def serialize_keywords(self, keywords: deque[Keyword], _info):
        return list(keywords)

    @field_validator("keywords", mode="before")
    def validate_keywords(cls, value: list[Keyword]):
        return deque(value)

class Cluster(BaseModel):
    cluster_id: UUID = uuid4()
    product_id: str
    child_keywords: list[str] # ID's of the keywords which created this topic.
    gen_keyword: str # Keyword generated by k-means centroid of all embeddings.
    embedding: list[float]
    sentiment_sum: float
    sentiment_count: int